{"version":3,"file":"static/js/221.36af0390.chunk.js","mappings":"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","sources":["webpack://socialn/./src/components/Settings/Settings.module.sass?b51b","components/Settings/Settings.tsx","components/Settings/SettingsContainer.tsx","components/common/FormsControls/FormsControls.jsx","hoc/withAuthRedirect.js","utilities/validation.js","webpack://socialn/./src/components/common/FormsControls/FormsControls.module.sass?7f83"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"settingsFields\":\"Settings_settingsFields__xvJAi\",\"choosePhoto\":\"Settings_choosePhoto__rB9Pc\",\"mainInfoBlock\":\"Settings_mainInfoBlock__kikwa\",\"photoSelected\":\"Settings_photoSelected__EEf1r\",\"info\":\"Settings_info__F3NPI\",\"lookingJovBlock\":\"Settings_lookingJovBlock__BXnhG\",\"contacts\":\"Settings_contacts__9mBM-\"};","import React from 'react'\r\nimport s from './Settings.module.sass'\r\nimport { createForm } from '../common/FormsControls/FormsControls'\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utilities/validation';\r\nimport { profileType } from '../../types/types';\r\nimport UserIcon from \"../../assets/images/unknown.png\";\r\n\r\n\r\n\r\ntype SettingsPropsType = {\r\n  profile: profileType,\r\n  userId: number,\r\n  getProfile: any,\r\n  UpdateStatus: any,\r\n  savePhoto: any,\r\n  saveProfile: any,\r\n}\r\n\r\nconst Settings: React.FC<SettingsPropsType> = React.memo((props) => {\r\n\r\n  const photoSelected = (e: any) => {\r\n    props.savePhoto(e.target.files[0])\r\n  }\r\n\r\n  const onSubmit = (formData: any) => {\r\n    props.saveProfile(formData).then(\r\n      () => { alert('Внесены изменения!') }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Настройки</h1>\r\n      <PersonDataFormReduxForm\r\n      // @ts-ignore\r\n        initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}\r\n        UpdateStatus={props.UpdateStatus} photoSelected={photoSelected} />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Settings\r\n\r\ntype PersonDataPropsType = {\r\n  initialValues: profileType,\r\n  profile: profileType,\r\n  onSubmit: any,\r\n  UpdateStatus: any,\r\n  photoSelected: any,\r\n  handleSubmit: any,\r\n  error: any\r\n}\r\n\r\nconst PersonDataForm: React.FC<PersonDataPropsType> = React.memo((props) => {\r\n\r\n  const maxLength30 = maxLengthCreator(50)\r\n  const maxLength100 = maxLengthCreator(100)\r\n\r\n  return (\r\n    <div className={s.settingsFields}>\r\n      <div className={s.choosePhoto}>\r\n        <div className={s.photo}>\r\n          <img src={props.profile.photos.small ? props.profile.photos.small : UserIcon} alt=\"photo\" />\r\n        </div>\r\n        <label htmlFor=\"photoSelected\" className=\"photoSelectedLabel\">Выберите фото</label>\r\n        <input type={\"file\"} name=\"photoSelected\" className={s.photoSelected} id=\"photoSelected\" onChange={props.photoSelected} />\r\n      </div>\r\n      <form className={s.info} onSubmit={props.handleSubmit}>\r\n        <div className={s.mainInfoBlock}>\r\n          <div className={s.fields}>\r\n            {createForm('fullName', Input, 'text', 'Полное имя...', [required, maxLength30])}\r\n          </div>\r\n          <div className={s.lookingJovBlock}>\r\n            <div className={s.fields}>\r\n              {createForm('lookingForAJob', Input, 'checkbox')}\r\n            </div>\r\n            <div className={s.fields}>\r\n              {createForm('lookingForAJobDescription', Input, 'text', 'Описание работы...', [required, maxLength100])}\r\n            </div>\r\n          </div>\r\n          <div className={s.fields}>\r\n            {createForm('aboutMe', Input, 'text', 'Биография...', [required, maxLength100])}\r\n          </div>\r\n        </div>\r\n        <div className={s.contacts}><b>Контакты :</b> {Object.keys(props.profile.contacts)\r\n          .map(key => {\r\n            return <div className={s.contacts}>\r\n              <b>{createForm('contacts.' + key, Input, 'text', key + '...')}</b>\r\n            </div>\r\n          })}</div>\r\n        <div>\r\n          {props.error && <div className={s.commonError}>{props.error}</div>}\r\n          <button>Подтверждаю</button>\r\n        </div>\r\n      </form>\r\n    </div>)\r\n})\r\n\r\n\r\n// @ts-ignore\r\nconst PersonDataFormReduxForm = reduxForm({ form: 'personEdit' })(PersonDataForm)","import React from \"react\";\r\nimport Settings from './Settings'\r\nimport { connect } from \"react-redux\"\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { UpdateStatus, savePhoto, getProfile, saveProfile } from \"../../redux/profileReducer\";\r\nimport { profileType } from \"../../types/types\";\r\nimport { appStateType } from \"../../redux/Store\";\r\n\r\n\r\n\r\ntype mapStateToPropsType = {\r\n  profile: profileType,\r\n  userId: number,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n  getProfile: any,\r\n  UpdateStatus: any,\r\n  savePhoto: any,\r\n  saveProfile: any,\r\n}\r\n\r\ntype mapOwnProps = {\r\n\r\n}\r\n\r\ntype PropsType = {\r\n  profile: profileType,\r\n  userId: number,\r\n  getProfile: (userId: number) => void,\r\n  UpdateStatus: any,\r\n  savePhoto: any,\r\n  saveProfile: any,\r\n}\r\n\r\n\r\nclass SettingsCont extends React.Component<PropsType> {\r\n\r\n  componentDidMount() {\r\n    this.props.getProfile(this.props.userId)\r\n  }\r\n\r\n  render() {\r\n    if (this.props.profile) {\r\n      return (\r\n        <Settings\r\n          {...this.props}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    userId: state.auth.userId,\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { UpdateStatus, savePhoto, getProfile, saveProfile }),\r\n  withAuthRedirect,\r\n      // @ts-ignore\r\n)(SettingsCont)\r\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.sass\";\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nexport const Textarea = ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        <textarea {...input} {...props} className={s.textarea} />\r\n      </div>\r\n      {hasError && <span className={s.someError}>{meta.error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Input = ({ input, meta: {touched, error}, ...props }) => {\r\n  const hasError = touched && error\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        <input {...input} {...props} className={s.input} />\r\n      </div>\r\n      {hasError && <span className={s.someError}>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const createForm = (name, component, type, placeholder=\"\", validators=[], props = {}) => {\r\n  return (<div className={`s.${name}`}>\r\n    <Field\r\n      name={name}\r\n      component={component}\r\n      type={type}\r\n      placeholder={placeholder}\r\n      validate={validators}\r\n      {...props}\r\n    />\r\n  </div>)\r\n}","import React from \"react\"\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport const withAuthRedirect = (Container) => {\r\n  class RedirectComponent extends React.Component{\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to='/login' />\r\n\r\n      return <Container {...this.props} />\r\n    }    \r\n  }\r\n  let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n","export const required = value => {\r\n  if (value) return undefined;\r\n  return 'require error'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) return `max length ${maxLength} symbols!`;\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__dV+OA\",\"error\":\"FormsControls_error__ZjcXj\",\"input\":\"FormsControls_input__kr6kc\",\"someError\":\"FormsControls_someError__PrG3Q\",\"commonError\":\"FormsControls_commonError__Rlpkm\",\"textarea\":\"FormsControls_textarea__xpgxZ\"};"],"names":["React","props","PersonDataFormReduxForm","initialValues","profile","onSubmit","formData","saveProfile","then","alert","UpdateStatus","photoSelected","e","savePhoto","target","files","PersonDataForm","maxLength30","maxLengthCreator","maxLength100","className","s","src","photos","small","UserIcon","alt","htmlFor","type","name","id","onChange","handleSubmit","createForm","Input","required","Object","keys","contacts","map","key","error","reduxForm","form","SettingsCont","this","getProfile","userId","compose","connect","state","profilePage","auth","withAuthRedirect","Textarea","input","meta","hasError","touched","component","placeholder","validators","validate","mapStateToProps","isAuth","Container","RedirectComponent","to","value","maxLength","length"],"sourceRoot":""}