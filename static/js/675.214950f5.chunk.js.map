{"version":3,"file":"static/js/675.214950f5.chunk.js","mappings":"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","sources":["webpack://socialn/./src/components/Dialogs/Dialogs.module.sass?c081","webpack://socialn/./src/components/Dialogs/Contacts/Contacts.module.sass?5432","webpack://socialn/./src/components/Dialogs/Contacts/Contact/Contact.module.sass?5895","components/common/lastVisited/lastVisited.js","components/Dialogs/Contacts/Contact/Contact.tsx","components/Dialogs/Contacts/Contacts.tsx","webpack://socialn/./src/components/Dialogs/Chat/Chat.module.sass?baad","webpack://socialn/./src/components/Dialogs/Chat/Writer/Writer.module.sass?d908","components/Dialogs/Chat/Writer/Writer.tsx","webpack://socialn/./src/components/Dialogs/Chat/SendingMessage/SendingMessage.module.sass?1dd9","components/Dialogs/Chat/SendingMessage/SendingMessage.tsx","components/Dialogs/Chat/Chat.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.js","utilities/validation.js","webpack://socialn/./src/components/common/FormsControls/FormsControls.module.sass?7f83"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Dialogs_wrapper__DeaPX\",\"chat\":\"Dialogs_chat__ZvZUT\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactsBlock\":\"Contacts_contactsBlock__UoVP+\",\"contacts\":\"Contacts_contacts__oDeh0\",\"contactFormBlock\":\"Contacts_contactFormBlock__x5V7f\",\"contactForm\":\"Contacts_contactForm__0Lh7d\"};","// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"Contact_ava__y+ZB-\",\"contact\":\"Contact_contact__PEb8e\",\"active\":\"Contact_active__WYlI6\",\"info\":\"Contact_info__mXtfS\"};","const lastVisited = (postDate) => {\r\n  let date = Date.parse(postDate)\r\n  let diff = new Date() - date;\r\n  if (diff < 1000) {\r\n    return 'прямо сейчас';\r\n  }\r\n  let sec = Math.floor(diff / 1000);\r\n  if (sec < 60) {\r\n    return sec + ' сек. назад';\r\n  }\r\n  let min = Math.floor(diff / 60000);\r\n  if (min < 60) {\r\n    return min + ' мин. назад';\r\n  }\r\n\r\n  let d = new Date(date);\r\n  d = [\r\n    '0' + d.getDate(),\r\n    '0' + (d.getMonth() + 1),\r\n    '' + d.getFullYear(),\r\n    '0' + d.getHours(),\r\n    '0' + d.getMinutes()\r\n  ].map(component => component.slice(-2));\r\n  return d.slice(0, 3).join('.') + ' ' + d.slice(3).join(':');\r\n}\r\n\r\nexport default lastVisited;","import React from 'react'\r\nimport s from './Contact.module.sass';\r\nimport UserIcon from \"../../../../assets/images/unknown.png\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport lastVisited from '../../../common/lastVisited/lastVisited.js'\r\n\r\ntype PropsType = {\r\n  key: number\r\n  nickName: string\r\n  id: number\r\n  ava: string\r\n  newMessagesCount: number\r\n  lastActivity: string \r\n}\r\n\r\nconst Contact: React.FC<PropsType> = React.memo((props) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <NavLink to={'/dialogs/' + props.id} className={navData => navData.isActive ? s.active : s.link}>\r\n        <img src={props.ava != null ? props.ava : UserIcon} className={s.ava}></img>\r\n        <div className={s.info}>\r\n          <h2 className={s.nickName}>{props.nickName}</h2>\r\n          <p>{props.newMessagesCount > 0 ? ('Новых сообщений: ' + props.newMessagesCount) : ''}</p>\r\n          <p className={s.lastActivity}>Был(а) в сети: {lastVisited(props.lastActivity)}</p>\r\n        </div>\r\n      </NavLink>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Contact","import React from 'react'\r\nimport s from './Contacts.module.sass';\r\nimport Contact from './Contact/Contact';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../../common/FormsControls/FormsControls';\r\nimport { required } from '../../../utilities/validation';\r\n\r\ntype ContactsPropsType = {\r\n  users: Array<any>\r\n  getProfile: (profileId: number) => void\r\n  user: any\r\n  YourId: number\r\n  findPerson: (name: string) => void\r\n}\r\n\r\nconst Contacts = React.memo<ContactsPropsType>((props) => {\r\n  const onSubmit = (formData: any) => {\r\n    props.findPerson(formData.nameContact)\r\n  }\r\n\r\n  return (\r\n    <div className={s.contactsBlock}>\r\n      <div className={s.findFriend}>\r\n        <FindContactReduxForm onSubmit={onSubmit} />\r\n      </div>\r\n      <div className={s.contacts}>\r\n        {(props.user && props.user.userId != props.YourId) &&\r\n          <Contact key={props.user.userId} nickName={props.user.fullName}\r\n            id={props.user.userId} ava={props.user.photos.small}\r\n            newMessagesCount={props.user.newMessagesCount}\r\n            lastActivity={props.user.lastUserActivityDate} />}\r\n        {props.users.map(user => <Contact key={user.id}\r\n          newMessagesCount={user.newMessagesCount} nickName={user.userName}\r\n          id={user.id} ava={user.photos.small} lastActivity={user.lastUserActivityDate} />)\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\ntype FindContactPropsType = {\r\n  handleSubmit: any\r\n}\r\n\r\nconst FindContactForm: React.FC<FindContactPropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={s.contactFormBlock}>\r\n      <Field name={\"nameContact\"} component={Input} type={\"text\"} placeholder={\"Имя пользователя\"} validate={[required]} />\r\n      <button className={s.contactBtn}>Найти</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst FindContactReduxForm = reduxForm({ form: 'FindPerson' })(FindContactForm)\r\n\r\n\r\nexport default Contacts","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__CcF6+\",\"messages\":\"Chat_messages__i7JOP\",\"header\":\"Chat_header__yunV+\",\"dialogWith\":\"Chat_dialogWith__dkHJA\"};","// extracted by mini-css-extract-plugin\nexport default {\"you\":\"Writer_you__T2F8H\",\"me\":\"Writer_me__042Pz\",\"delView\":\"Writer_delView__-gGQ9\",\"message\":\"Writer_message__3qKcN\",\"ava\":\"Writer_ava__xLGVz\",\"deleteMsg\":\"Writer_deleteMsg__N4uF-\",\"viewed\":\"Writer_viewed__NqmGT\",\"unViewed\":\"Writer_unViewed__cldsU\"};","import React from 'react';\r\nimport { accountType, messageType, profileType } from '../../../../types/types';\r\nimport s from './Writer.module.sass';\r\n\r\ntype PropsType = {\r\n  key: string\r\n  message: messageType\r\n  isMe: boolean\r\n  chatWith: Array<accountType>\r\n  profile: profileType\r\n  deleteForMe: (messageId: string) => void,\r\n  messageToSpam: (messageId: string) => void,\r\n}\r\n\r\nconst Writer: React.FC<PropsType> = (props) => {\r\n\r\n  const deleteMessage = () => {\r\n    props.deleteForMe(props.message.id)\r\n  }\r\n  const messageToSpam = () => {\r\n    props.messageToSpam(props.message.id)\r\n  }\r\n\r\n  return (\r\n    <div className={props.isMe ? s.me : s.you}>\r\n      <div className={s.message}>\r\n        <p>{props.message.body}</p>\r\n      </div>\r\n      <div className={s.delView}>\r\n        <span className={props.message.viewed ? s.viewed : s.unViewed}></span>\r\n        <button onClick={deleteMessage} className={s.deleteMsg}></button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Writer","// extracted by mini-css-extract-plugin\nexport default {\"sendingMessageForm\":\"SendingMessage_sendingMessageForm__WJFy5\",\"sendBtn\":\"SendingMessage_sendBtn__lbC3N\"};","import React from 'react';\r\nimport s from './SendingMessage.module.sass';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../../common/FormsControls/FormsControls';\r\nimport { accountType } from '../../../../types/types';\r\n\r\ntype SendingFormPropsType = {\r\n  handleSubmit: any\r\n  nameForm?: string\r\n}\r\n\r\nconst SendingMessageForm: React.FC<SendingFormPropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={s.sendingMessageForm}>\r\n      <Field name={props.nameForm} component={Textarea} type={\"text\"} placeholder={\"Введите сообщение...\"}  />\r\n      <button className={s.sendBtn}></button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst DialogReduxForm = reduxForm<{}, SendingMessagePropsType>({ form: 'dialog' })(SendingMessageForm)\r\n\r\ntype SendingMessagePropsType = {\r\n  sendMessage: (userId: number, message: []) => void\r\n  chatWith: Array<accountType>\r\n  nameForm?: any\r\n}\r\n\r\nconst SendingMessage: React.FC<SendingMessagePropsType> = (props) => {\r\n  let nameForm = 'message'\r\n  const onSubmit = (formData: any) => {\r\n    props.sendMessage(props.chatWith[0].id, formData.message)\r\n  }\r\n  return (\r\n    //@ts-ignore\r\n    <DialogReduxForm onSubmit={onSubmit} chatWith={props.chatWith} nameForm={nameForm} />\r\n  )\r\n}\r\n\r\nexport default SendingMessage","import { useRef, useEffect } from 'react'\r\nimport React from 'react';\r\nimport s from './Chat.module.sass';\r\nimport Writer from './Writer/Writer';\r\nimport SendingMessage from './SendingMessage/SendingMessage'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { accountType, messageType, profileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  users: Array<any>\r\n  chatWith: Array<accountType>,\r\n  messageData: Array<messageType>,\r\n  profile: profileType,\r\n  YourId: number,\r\n  currentPage: number,\r\n  totalMessageCount: number | null,\r\n  pageSize: number,\r\n  portionCount: number,\r\n  listOfMessages: (userId: number, currentPage: number | null,\r\n    pageSize: number | null) => void,\r\n  sendMessage: (userId: number, message: []) => void,\r\n  deleteForMe: (messageId: string) => void,\r\n  SetPageSize: (pageSize: number) => void,\r\n  messageToSpam: (messageId: string) => void,\r\n  SetCurrentPage: (currentPage: number) => void,\r\n  moreMessages: (userId: number, currentPage: number, pageSize:\r\n    number, messages: Array<messageType>) => void,\r\n}\r\n\r\nconst Chat = React.memo<PropsType>((props) => {\r\n\r\n  const messagesEndRef: any = useRef(null)\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  }, [props.messageData]);\r\n\r\n  const message = props.messageData\r\n    .map(message => <Writer\r\n      key={message.id}\r\n      message={message}\r\n      isMe={message.senderId === props.YourId}\r\n      deleteForMe={props.deleteForMe}\r\n      chatWith={props.chatWith}\r\n      profile={props.profile}\r\n      messageToSpam={props.messageToSpam}\r\n    />)\r\n\r\n  const more = () => {\r\n    props.moreMessages(props.chatWith[0].id, props.currentPage + 1, 20, props.messageData)\r\n    props.SetCurrentPage(props.currentPage + 1)\r\n  }\r\n\r\n  const chatWithName = props.chatWith[0] && (props.chatWith[0].userName ? props.chatWith[0].userName : props.chatWith[0].userName)\r\n\r\n  return (\r\n    <div className={s.chat}>\r\n      <NavLink to={'/profile/' + (props.chatWith[0] && props.chatWith[0].id)} className={s.dialogWith}>\r\n        <h2 className={s.header}>{chatWithName}</h2>\r\n      </NavLink>\r\n      <div className={s.messages}>\r\n        {props.currentPage < props.portionCount && <button onClick={() => { more() }} className={s.moreBtn}>Больше</button>}\r\n        {message}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      {props.users && <SendingMessage\r\n        sendMessage={props.sendMessage}\r\n        chatWith={props.chatWith}\r\n      />}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Chat","import React from 'react'\r\nimport s from './Dialogs.module.sass'\r\nimport Contacts from './Contacts/Contacts'\r\nimport Chat from './Chat/Chat'\r\nimport { accountType, messageType, profileType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n  chatWith: Array<accountType>,\r\n  users: Array<any>,\r\n  messageData: Array<messageType>,\r\n  user: any,\r\n  YourId: number,\r\n  profile: profileType,\r\n  currentPage: number,\r\n  totalMessageCount: number | null,\r\n  pageSize: number,\r\n  portionCount: number,\r\n  listOfMessages: (userId: number, currentPage: number | null,\r\n    pageSize: number | null) => void,\r\n  sendMessage: (userId: number, message: []) => void,\r\n  deleteForMe: (messageId: string) => void,\r\n  getProfile: (profileId: number) => void,\r\n  SetPageSize: (pageSize: number) => void,\r\n  messageToSpam: (messageId: string) => void,\r\n  listOfNewMessages: () => void,\r\n  SetCurrentPage: (currentPage: number) => void,\r\n  moreMessages: (userId: number, currentPage: number, pageSize:\r\n    number, messages: Array<messageType>) => void,\r\n  findPerson: (name: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = React.memo((props) => {\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <h1>Чат</h1>\r\n      <div className={s.chat}>\r\n        <Contacts users={props.users} getProfile={props.getProfile}\r\n          user={props.user} YourId={props.YourId} findPerson={props.findPerson} />\r\n        <Chat\r\n          messageData={props.messageData}\r\n          sendMessage={props.sendMessage}\r\n          chatWith={props.chatWith}\r\n          deleteForMe={props.deleteForMe}\r\n          YourId={props.YourId}\r\n          profile={props.profile}\r\n          listOfMessages={props.listOfMessages}\r\n          SetPageSize={props.SetPageSize}\r\n          currentPage={props.currentPage}\r\n          totalMessageCount={props.totalMessageCount}\r\n          pageSize={props.pageSize}\r\n          messageToSpam={props.messageToSpam}\r\n          users={props.users}\r\n          portionCount={props.portionCount}\r\n          SetCurrentPage={props.SetCurrentPage}\r\n          moreMessages={props.moreMessages}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n  listOfMessages, sendMessage, deleteForMe, allDialogs,\r\n  SetPageSize, messageToSpam, listOfNewMessages, SetCurrentPage,\r\n  startChatting, moreMessages, findPerson\r\n} from '../../redux/dialogsReducer';\r\nimport { getProfile } from \"../../redux/profileReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { accountType, messageType, profileType } from \"../../types/types\";\r\nimport { appStateType } from \"../../redux/Store\";\r\n\r\nexport function withRouter(Children: any) {\r\n  return (props: any) => {\r\n    const match = { params: useParams() };\r\n    return <Children {...props} match={match} />\r\n  }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  chatWith: Array<accountType>,\r\n  users: Array<any> | null,\r\n  messageData: Array<messageType>,\r\n  user: any,\r\n  YourId: number | null,\r\n  profile: profileType | null,\r\n  currentPage: number | null,\r\n  totalMessageCount: number | null,\r\n  pageSize: number | null,\r\n  newMessages: number | null,\r\n  portionCount: number | null\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n  listOfMessages: (userId: number, currentPage: number | null,\r\n    pageSize: number | null) => void,\r\n  sendMessage: (userId: number, message: []) => void,\r\n  deleteForMe: (messageId: string) => void,\r\n  getProfile: (profileId: number) => void,\r\n  allDialogs: () => void,\r\n  SetPageSize: (pageSize: number) => void,\r\n  messageToSpam: (messageId: string) => void,\r\n  listOfNewMessages: () => void,\r\n  SetCurrentPage: (currentPage: number) => void,\r\n  startChatting: (userId: number, currentPage: number, pageSize: number) => void,\r\n  moreMessages: (userId: number, currentPage: number,\r\n    pageSize: number, messages: Array<messageType>) => void,\r\n  findPerson: (name: string) => void\r\n}\r\n\r\ntype mapOwnPropsType = {}\r\n\r\ntype PropsType = {\r\n  chatWith: Array<accountType>,\r\n  users: Array<any>,\r\n  messageData: Array<messageType>,\r\n  user: any,\r\n  YourId: number,\r\n  profile: profileType,\r\n  currentPage: number,\r\n  totalMessageCount: number | null,\r\n  pageSize: number,\r\n  newMessages: Array<messageType>,\r\n  portionCount: number,\r\n  match: any,\r\n  listOfMessages: (userId: number, currentPage: number | null,\r\n    pageSize: number | null) => void,\r\n  sendMessage: (userId: number, message: []) => void,\r\n  deleteForMe: (messageId: string) => void,\r\n  getProfile: (profileId: number) => void,\r\n  allDialogs: () => void,\r\n  SetPageSize: (pageSize: number) => void,\r\n  messageToSpam: (messageId: string) => void,\r\n  listOfNewMessages: () => void,\r\n  SetCurrentPage: (currentPage: number) => void,\r\n  startChatting: (userId: number, currentPage: number,\r\n    pageSize: number) => void,\r\n  moreMessages: (userId: number, currentPage: number, pageSize: number,\r\n    messages: Array<messageType>) => void,\r\n  findPerson: (name: string) => void\r\n}\r\n\r\nclass DialogsCont extends React.Component<PropsType> {\r\n\r\n  startTheDialog() {\r\n    const userId = this.props.match.params.userId\r\n    if (userId != null) {\r\n      this.props.startChatting(userId, this.props.currentPage, this.props.pageSize)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getProfile(this.props.YourId)\r\n    this.props.listOfNewMessages()\r\n    this.props.allDialogs()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: any, prevState: appStateType, snapshot: any) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      let isFriend = false\r\n      this.props.users.map(user => user.id == this.props.match.params.userId ? isFriend = true : null)\r\n      if (isFriend && this.props.profile.userId != this.props.YourId) {\r\n        this.props.getProfile(this.props.YourId)\r\n      }\r\n      this.startTheDialog()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (<>\r\n      <Dialogs\r\n        {...this.props}\r\n      />\r\n    </>)\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n  return {\r\n    chatWith: state.dialogsPage.chatWith,\r\n    users: state.dialogsPage.accounts,\r\n    messageData: state.dialogsPage.messages,\r\n    user: state.profilePage.profile,\r\n    YourId: state.auth.userId,\r\n    profile: state.profilePage.profile,\r\n    currentPage: state.dialogsPage.currentPage,\r\n    totalMessageCount: state.dialogsPage.totalMessageCount,\r\n    pageSize: state.dialogsPage.pageSize,\r\n    newMessages: state.dialogsPage.newMessages,\r\n    portionCount: state.dialogsPage.portionCount\r\n  }\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect\r\n    <mapStateToPropsType, mapDispatchToPropsType, mapOwnPropsType, appStateType>(mapStateToProps,\r\n      {\r\n        listOfMessages, sendMessage,\r\n        deleteForMe, getProfile,\r\n        allDialogs, SetPageSize,\r\n        messageToSpam, listOfNewMessages,\r\n        SetCurrentPage, startChatting,\r\n        moreMessages, findPerson\r\n      }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(DialogsCont)","import React from \"react\";\r\nimport s from \"./FormsControls.module.sass\";\r\nimport { Field } from 'redux-form';\r\n\r\ntype TextareaPropsType = {\r\n  input: any\r\n  meta: any\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaPropsType> = ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        <textarea {...input} {...props} className={s.textarea} />\r\n      </div>\r\n      {hasError && <span className={s.someError}>{meta.error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\ntype InputPropsType = {\r\n  input: any\r\n  meta: any\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({ input, meta: { touched, error }, ...props }) => {\r\n  const hasError = touched && error\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        <input {...input} {...props} className={s.input} />\r\n      </div>\r\n      {hasError && <span className={s.someError}>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const createForm = (name: string, component: any, type: string, placeholder = \"\", validators: Array<any> = [], props = {}) => {\r\n  return (<div className={`s.${name}`}>\r\n    <Field\r\n      name={name}\r\n      component={component}\r\n      type={type}\r\n      placeholder={placeholder}\r\n      validate={validators}\r\n      {...props}\r\n    />\r\n  </div>)\r\n}","import React from \"react\"\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport const withAuthRedirect = (Container) => {\r\n  class RedirectComponent extends React.Component{\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to='/login' />\r\n\r\n      return <Container {...this.props} />\r\n    }    \r\n  }\r\n  let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n","export const required = value => {\r\n  if (value) return undefined;\r\n  return 'require error'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) return `max length ${maxLength} symbols!`;\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__dV+OA\",\"error\":\"FormsControls_error__ZjcXj\",\"input\":\"FormsControls_input__kr6kc\",\"someError\":\"FormsControls_someError__PrG3Q\",\"commonError\":\"FormsControls_commonError__Rlpkm\",\"textarea\":\"FormsControls_textarea__xpgxZ\"};"],"names":["postDate","date","Date","parse","diff","sec","Math","floor","min","d","getDate","getMonth","getFullYear","getHours","getMinutes","map","component","slice","join","React","props","className","s","to","id","navData","isActive","src","ava","UserIcon","nickName","newMessagesCount","lastVisited","lastActivity","Contacts","FindContactReduxForm","onSubmit","formData","findPerson","nameContact","user","userId","YourId","fullName","photos","small","lastUserActivityDate","users","userName","reduxForm","form","handleSubmit","Field","name","Input","type","placeholder","validate","required","isMe","message","body","viewed","onClick","deleteForMe","DialogReduxForm","nameForm","Textarea","sendMessage","chatWith","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","messageData","senderId","profile","messageToSpam","chatWithName","currentPage","portionCount","moreMessages","SetCurrentPage","ref","getProfile","listOfMessages","SetPageSize","totalMessageCount","pageSize","withRouter","Children","match","params","useParams","DialogsCont","this","startChatting","listOfNewMessages","allDialogs","prevProps","prevState","snapshot","isFriend","startTheDialog","compose","connect","state","dialogsPage","accounts","messages","profilePage","auth","newMessages","withAuthRedirect","input","meta","hasError","touched","error","createForm","validators","mapStateToProps","isAuth","Container","RedirectComponent","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}